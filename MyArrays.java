

public class MyArrays
{
    static byte[][]arr;
    static byte[][]str;
    static int counter = 0;
  public MyArrays()
  {
      
  }
  public static void passArray(String strInput)
  {
      
      //characters NOT USED  /NOT ¬£€¦ NOT/ #~ ;: //EURO,POUNDS : NOT SUPPORTED
  byte [][] empty   =  {{0,0,0,0,0},
                        {0,0,0,0,0},
                        {0,0,0,0,0},
                        {0,0,0,0,0},
                        {0,0,0,0,0}};//~
      
      byte [][] question  = {{0,1,1,1,0},{1,0,0,0,1},{0,0,0,1,0},{0,0,0,1,0},{0,0,0,1,0}};//?
      byte [][] at        = {{0,1,1,1,0},{1,0,0,1,1},{1,0,1,0,1},{1,0,0,1,0},{0,1,1,1,0}};//@
      byte [][] dot       = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,1,0,0}};//.
      byte [][] perc      = {{1,1,0,0,1},{1,1,0,1,0},{0,0,1,0,0},{0,1,0,1,1},{1,0,0,1,1}};//%
      byte [][] clsque    = {{0,1,1,1,0},{0,0,0,1,0},{0,0,0,1,0},{0,0,0,1,0},{0,1,1,1,0}};//]
      byte [][] opsque    = {{0,1,1,1,0},{0,1,0,0,0},{0,1,0,0,0},{0,1,0,0,0},{0,1,1,1,0}};//[      
      byte [][] clcurl    = {{0,1,0,0,0},{0,0,1,0,0},{0,0,1,1,0},{0,0,1,0,0},{0,1,0,0,0}};//}   
      byte [][] opcurl    = {{0,0,0,1,0},{0,0,1,0,0},{0,1,1,0,0},{0,0,1,0,0},{0,0,0,1,0}};//{      
      byte [][] clphar    = {{0,0,1,0,0},{0,0,0,1,0},{0,0,0,1,0},{0,0,0,1,0},{0,0,1,0,0}};//)      
      byte [][] opphar    = {{0,0,1,0,0},{0,1,0,0,0},{0,1,0,0,0},{0,1,0,0,0},{0,0,1,0,0}};//(      
      byte [][] exclam    = {{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,0,0,0},{0,0,1,0,0}};//!   
      byte [][] euro      = {{0,1,1,1,0},{1,0,0,0,1},{1,1,1,0,0},{1,0,0,0,1},{0,1,1,1,0}};//€NOT WORKING   
      byte [][] incomma   = {{0,1,0,1,0},{0,1,0,1,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}};//"
      byte [][] dollar    = {{0,1,1,1,1},{1,0,1,0,0},{0,1,1,1,0},{0,0,1,0,1},{1,1,1,1,0}};//$ NOT WORKING
      byte [][] bslash    = {{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,1}};// \
      byte [][] fslash    = {{0,0,0,0,1},{0,0,0,1,0},{0,0,1,0,0},{0,1,0,0,0},{1,0,0,0,0}};// /     
      byte [][] phound    = {{0,0,1,1,0},{0,1,0,0,1},{1,1,1,0,0},{0,1,0,0,1},{1,1,1,1,1}};// £ NOT WORKING     
      byte [][] zero      = {{0,1,1,0,0},{1,0,0,1,0},{1,0,0,1,0},{1,0,0,1,0},{0,1,1,0,0}};// 0
      byte [][] nine      = {{0,1,1,1,0},{1,0,0,0,1},{0,1,1,1,1},{0,0,0,0,1},{1,1,1,1,0}};    
      byte [][] eigth     = {{0,1,1,1,0},{1,0,0,0,1},{0,1,1,1,0},{1,0,0,0,1},{0,1,1,1,0}};       
      byte [][] seven     = {{1,1,1,1,1},{1,0,0,0,1},{0,0,0,1,0},{0,0,1,0,0},{0,0,1,0,0}};        
      byte [][] six       = {{0,1,1,1,1},{1,0,0,0,0},{1,1,1,1,0},{1,0,0,0,1},{0,1,1,1,0}};        
      byte [][] five      = {{1,1,1,1,1},{1,0,0,0,0},{1,1,1,1,0},{0,0,0,0,1},{1,1,1,1,0}};        
      byte [][] four      = {{0,0,0,1,0},{0,0,1,1,0},{0,1,0,1,0},{1,1,1,1,1},{0,0,0,1,0}};        
      byte [][] three     = {{0,1,1,1,0},{1,0,0,0,1},{0,0,1,1,0},{1,0,0,0,1},{0,1,1,1,0}};      
      byte [][] two       = {{0,1,1,1,0},{1,0,0,0,1},{0,0,0,1,0},{0,0,1,0,0},{0,1,1,1,1}};        
      byte [][] one       = {{0,0,1,0,0},{0,1,1,0,0},{1,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0}};        
      byte [][] apostroph = {{1,0,0,0,0},{0,1,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}};//'       
      byte [][] A         = {{0,0,1,0,0},{0,1,0,1,0},{1,0,0,0,1},{1,1,1,1,1},{1,0,0,0,1}};        
      byte [][] B         = {{1,1,1,1,0},{1,0,0,0,1},{1,1,1,1,0},{1,0,0,0,1},{1,1,1,1,0}};        
      byte [][] C         = {{0,1,1,1,0,0},{1,0,0,0,1,0},{1,0,0,0,0,0},{1,0,0,0,1,0},{0,1,1,1,0,0}};        
      byte [][] D         = {{1,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,0}};        
      byte [][] E         = {{1,1,1,1,1},{1,0,0,0,0},{1,1,1,1,0},{1,0,0,0,0},{1,1,1,1,1}};        
      byte [][] F         = {{1,1,1,1,1},{1,0,0,0,0},{1,1,1,0,0},{1,0,0,0,0},{1,0,0,0,0}};        
      byte [][] G         = {{0,1,1,1,1},{1,0,0,0,0},{1,0,0,1,1},{1,0,0,0,1},{0,1,1,1,0}};        
      byte [][] H         = {{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,1},{1,0,0,0,1},{1,0,0,0,1}};        
      byte [][] I         = {{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0}};        
      byte [][] J         = {{1,1,1,1,1},{0,0,0,1,0},{0,0,0,1,0},{0,1,0,1,0},{0,0,1,0,0}};        
      byte [][] K         = {{1,0,0,0,1},{1,0,0,1,0},{1,1,1,0,0},{1,0,0,1,0},{1,0,0,0,1}};        
      byte [][] L         = {{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,1,1,1,0}};        
      byte [][] M         = {{1,0,0,0,1},{1,1,0,1,1},{1,0,1,0,1},{1,0,0,0,1},{1,0,0,0,1}};        
      byte [][] N         = {{1,0,0,0,1},{1,1,0,0,1},{1,0,1,0,1},{1,0,0,1,1},{1,0,0,0,1}};        
      byte [][] O         = {{0,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{0,1,1,1,0}};        
      byte [][] P         = {{1,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,0},{1,0,0,0,0}};        
      byte [][] Q         = {{0,1,1,0,0},{1,0,0,1,0},{1,0,0,1,0},{1,0,0,1,0},{0,1,1,1,1}};        
      byte [][] R         = {{1,1,1,1,0},{1,0,0,0,1},{1,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1}};        
      byte [][] S         = {{0,1,1,1,1},{1,0,0,0,0},{0,1,1,1,0},{0,0,0,0,1},{1,1,1,1,0}};        
      byte [][] T         = {{1,1,1,1,1},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0}};        
      byte [][] U         = {{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{0,1,1,1,0}};        
      byte [][] V         = {{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{0,1,0,1,0},{0,0,1,0,0}};       
      byte [][] W         = {{1,0,0,0,1},{1,0,0,0,1},{1,0,1,0,1},{1,0,1,0,1},{0,1,0,1,0}};        
      byte [][] X         = {{1,0,0,0,1},{0,1,0,1,0},{0,0,1,0,0},{0,1,0,1,0},{1,0,0,0,1}};        
      byte [][] Y         = {{1,0,0,0,1},{1,0,0,0,1},{0,1,0,1,0},{0,0,1,0,0},{0,0,1,0,0}};        
      byte [][] Z         = {{1,1,1,1,1},{0,0,0,1,0},{0,0,1,0,0},{0,1,0,0,0},{1,1,1,1,1}};       
      byte [][] SPACE     = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}};
      byte [][] arhead    = {{0,0,1,0,0},{0,1,0,1,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}};//^ from here
      byte [][] and       = {{0,0,1,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,1,0,1,0},{0,0,1,0,1}};//&
      byte [][] under     = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,1,1,1,0}};//_
      byte [][] equ       = {{0,0,0,0,0},{0,1,1,1,0},{0,0,0,0,0},{0,1,1,1,0},{0,0,0,0,0}};//=
      byte [][] vline     = {{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0}};//|
      byte [][] comma     = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,1,0},{0,0,1,0,0}};//,
      byte [][] lesst     = {{0,0,0,1,0},{0,0,1,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0}};//<
      byte [][] greatt    = {{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,1,0,0},{0,1,0,0,0}};//>
      byte [][] star      = {{0,1,0,1,0},{0,0,1,0,0},{0,1,0,1,0},{0,0,0,0,0},{0,0,0,0,0}};//*
      byte [][] minus     = {{0,0,0,0,0},{0,0,0,0,0},{0,1,1,1,0},{0,0,0,0,0},{0,0,0,0,0}};//-
      byte [][] pluss     = {{0,0,0,0,0},{0,0,1,0,0},{0,1,1,1,0},{0,0,1,0,0},{0,0,0,0,0}};//+
      byte [][] collon    = {{0,0,0,0,0},{0,0,1,0,0},{0,0,0,0,0},{0,0,1,0,0},{0,0,0,0,0}};//:
      byte [][] semicollon= {{0,0,0,0,0},{0,0,1,0,0},{0,0,0,0,0},{0,0,1,0,0},{0,1,0,0,0}};//;
      byte [][] has       = {{0,1,0,1,0},{1,1,1,1,1},{0,1,0,1,0},{1,1,1,1,1},{0,1,0,1,0}};//#
      byte [][] tilde     = {{0,0,0,0,0},{0,1,0,0,0},{1,0,1,0,1},{0,0,0,1,0},{0,0,0,0,0}};//~
        char[]ch = strInput.toCharArray();//create char array for SWITCH     
        char tempChar;

          for(int i=0;i<ch.length;i++)
          {
              tempChar = ch[i];
              switch(tempChar)
              {
                  case '#':arr=has;break;
                  case '~':arr=tilde;break;    
                  case ':':arr=collon;break;
                  case ';':arr=semicollon;break;    
                  case '^':arr=arhead;break;
                  case '&':arr=and;break;
                  case '_':arr=under;break;
                  case '=':arr=equ;break;
                  case '|':arr=vline;break;
                  case ',':arr=comma;break;
                  case '<':arr=lesst;break;
                  case '>':arr=greatt;break;
                  case '*':arr=star;break;
                  case '-':arr=minus;break;
                  case '+':arr=pluss;break;
                  case 'A':arr=A;break;
                  case 'B':arr=B;break;
                  case 'C':arr=C;break;
                  case 'D':arr=D;break;
                  case 'E':arr=E;break;
                  case 'F':arr=F;break;
                  case 'G':arr=G;break;
                  case 'H':arr=H;break;
                  case 'I':arr=I;break;
                  case 'J':arr=J;break;
                  case 'K':arr=K;break;
                  case 'L':arr=L;break;
                  case 'M':arr=M;break;
                  case 'N':arr=N;break;
                  case 'O':arr=O;break;
                  case 'P':arr=P;break;
                  case 'Q':arr=Q;break;
                  case 'R':arr=R;break;
                  case 'S':arr=S;break;
                  case 'T':arr=T;break;
                  case 'U':arr=U;break;
                  case 'V':arr=V;break;
                  case 'W':arr=W;break;
                  case 'X':arr=X;break;
                  case 'Y':arr=Y;break;
                  case 'Z':arr=Z;break;
                  case '`':arr=apostroph;break;
                  case '1':arr=one;break;
                  case '2':arr=two;break;
                  case '3':arr=three;break;
                  case '4':arr=four;break;
                  case '5':arr=five;break;
                  case '6':arr=six;break;
                  case '7':arr=seven;break;
                  case '8':arr=eigth;break;
                  case '9':arr=nine;break;
                  case '0':arr=zero;break;
                  case '/':arr=fslash;break;
                  case '\\':arr=bslash;break;
                  case '$':arr=dollar;break;
                  case '!':arr=exclam;break;
                  case '(':arr=opphar;break;
                  case ')':arr=clphar;break;
                  case '{':arr=opcurl;break;
                  case '}':arr=clcurl;break;
                  case '[':arr=opsque;break;
                  case ']':arr=clsque;break;
                  case '%':arr=perc;break;
                  case '.':arr=dot;break;
                  case '@':arr=at;break;
                  case '?':arr=question;break;
                  default:arr = SPACE;
                  
              }
              createArray(arr);
          }
              
          
    }
   public static void createArray(byte [][]ch)
    {
      
        int columns = counter *6;
        counter++;
      
        for(int j=0;j<ch.length;j++)
        {
            columns = counter *6;
            for(int k=0;k<ch[0].length;k++)
            {
                 if(ch[j][k]!=0)
                 {
                     str[j][columns]=1;
                 }
                 else
                 {
                    str[j][columns]=0; 
                 }
                 columns++;
            }
                
        }
    }
}
